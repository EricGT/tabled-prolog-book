/* XSB programs that explore some basic issues in automata theory.
*/
:- import member/2 from basics.
:- import tsetof/3 from setof.
at :- abolish_all_tables.

:- auto_table.

% :- accept(m0s1s2s,s1).

%% transition relation
%% m(MachineID,State,Symbol,NewState).
m(m0s1s2s,q0,0,q0).
m(m0s1s2s,q0,'',q1).		% '' indicates epsilon transition (is not a symbol)
m(m0s1s2s,q1,1,q1).
m(m0s1s2s,q1,'',q2).
m(m0s1s2s,q2,2,q2).

%% initial state
%% mis(MachineID,InitState).
mis(m0s1s2s,q0).

%% final state
%% mfs(MachineID,FinalState).
mfs(m0s1s2s,q2).

%% input string:
%% string(StringID,Position,Symbol,NextPosition)
string(s1,0,0,1).
string(s1,1,0,2).
string(s1,2,1,3).
string(s1,3,1,4).
string(s1,4,1,5).
string(s1,5,2,6).

%% string length
%% stringlen(StringID,StringLength)
stringlen(s1,6).

%% string s2
string(s2,0,0,1).
string(s2,1,2,2).
string(s2,2,1,3).

stringlen(s2,3).

%% accept(+MachineID,+StringID) succeeds if FSA with name MachineID
%%   accepts string with name StringName
accept(MachineName,StringName) :-
	mis(MachineName,StateStart),
	recognize(MachineName,StringName,StateStart,StateFinal,0,StringFinal),
	mfs(MachineName,StateFinal),
	stringlen(StringName,StringFinal).

%% recognize(MID,SID,MSt0,MSt,StrPos0,StrPos) succeeds if FSA named
%%  MID in state MSt0 and processing string named SID at position StrPos0
%%  can reach state MSt at position StrPos.
%% (right recursive)
recognize(_,_,MState,MState,SLoc,SLoc).
recognize(MachineName,StringName,MState0,MState,SLoc0,SLoc) :-
	string(StringName,SLoc0,Symbol,SLoc1),
	m(MachineName,MState0,Symbol,MState1),
	cond_print(([MState0,Symbol]->[MState1,SLoc1])),
	recognize(MachineName,StringName,MState1,MState,SLoc1,SLoc).
recognize(MachineName,StringName,MState0,MState,SLoc0,SLoc) :-
	m(MachineName,MState0,'',MState1),
	cond_print(([MState0]->[MState1,SLoc0])),
	recognize(MachineName,StringName,MState1,MState,SLoc0,SLoc).

:- dynamic ifprint/0.
ifprint.

cond_print(Term) :-
	(ifprint
	 ->	writeln(userout,Term)
	 ;	true
	).

%% accept_lr(MachineID,StringID) same semantices as accept/2
% left recursive, more efficient?
% :- acceptl(m0s1s2s,s1).
accept_lr(MachineName,StringName) :-
	mis(MachineName,StateStart),
	recognize_lr(MachineName,StringName,StateStart,StateFinal,0,StringFinal),
	mfs(MachineName,StateFinal),
	stringlen(StringName,StringFinal).

recognize_lr(_,_,MState,MState,SLoc,SLoc).
recognize_lr(MachineName,StringName,MState0,MState,SLoc0,SLoc) :-
	recognize_lr(MachineName,StringName,MState0,MState1,SLoc0,SLoc1),
	string(StringName,SLoc1,Symbol,SLoc),
	m(MachineName,MState1,Symbol,MState).
recognize_lr(MachineName,StringName,MState0,MState,SLoc0,SLoc) :-
	recognize_lr(MachineName,StringName,MState0,MState1,SLoc0,SLoc),
	m(MachineName,MState1,'',MState).

%=================================================================
%% epsilon-free machines

%% Given a definition of m, mis, mfs for a machine, define those
%%  predicates for an equivalent epsilon-free machine.

% define transition function
m(efree(Mach),State,Symbol,TargState) :-
	emoves(Mach,State,State1), % epsilon transitions from State to State1
	m(Mach,State1,Symbol,State2), % regular transition from State1 to State2
	Symbol \== '',		% yup, regular
	emoves(Mach,State2,TargState). % and epsilon transitions to TargState

%% emoves(MachID,St0,St) if FSA MachID can transition from St0 to St
%%  taking only epsilon transitions.
emoves(_,State,State).
emoves(Mach,State0,State) :-
	emoves(Mach,State0,State1),
	m(Mach,State1,'',State).

% define initial and final states
mis(efree(Mach),IS) :- mis(Mach,IS).
mfs(efree(Mach),FS) :- mfs(Mach,FS1),emoves(Mach,FS,FS1).

%=================================================================
% Define deterministic machine from a nondeterministic one.
% The initial state is the singleton set consisting of the initial 
%   state of the nondeterministic machine (assuming epsilon-free.)
mis(det(Mach),[IS]) :- mis(Mach,IS).

% The next state of the deterministic machine given a state and symbol 
%   is the set of nondeterministic states which are a next state starting 
%   from element of the current deterministic state.
m(det(Mach),State0,Sym,State) :-
%%	state_subset(Mach,State0), % for any subset of states
	reachable(det(Mach),State0), % only care about reachable states (and must bind State0)
	tsetof(NDS, a_next(Mach,State0,Sym,NDS), State). % set of next states

% S is a (possibly reachable) state in machine if it's initial or has an
%    in edge.
is_state(Mach,S) :- m(Mach,_,_,S).
is_state(Mach,S) :- mis(Mach,S).

% Find all states of ND machine, and return any subset.
state_subset(Mach,SubSet) :-
	findall(State,is_state(Mach,State),DStates),
	sort(DStates,States),
	subset(SubSet,States).

% (ordered) subsets of (ordered) set.
subset([],_States).
subset([X|S1],[X|States]) :- subset(S1,States).
subset(S1,[_|States]) :- subset(S1,States).


% A state is reachable if it is the initial state or if it can be 
%   reached by one step from some reachable state.
reachable(Mach,S) :- mis(Mach,S).
reachable(Mach,S) :- reachable(Mach,S1),m(Mach,S1,_,S).

% A next state is reachable if it is a next state from some member of 
%   the current deterministic state.
a_next(Mach,DState,Sym,NDState) :- 
	member(S1,DState),
	m(Mach,S1,Sym,NDState).

% A final state is a reachable deterministic state that contains the 
%   nondeterministic final state.
mfs(det(Mach),FS) :- mfs(Mach,NFS), reachable(det(Mach),FS),member(NFS,FS).

%=================================================================
% completed machine, i.e., every state has a transition on every symbol

% A symbol is in the alphabet of a machine if it appears in a non-epsilon 
%    transition.
alphabet(Mach,Sym) :- 
        m(Mach,_,Sym,_),
	Sym \== ''.

mis(completed(Mach),IS) :- mis(Mach,IS).
mfs(completed(Mach),FS) :- mfs(Mach,FS).

% Assume Mach is deterministic
% There is a transition to ``sink'' if there is no other transition on
%    this symbol from this state.
m(completed(Mach),So,Sy,sink) :-
        is_state(Mach,So),
        alphabet(Mach,Sy),
        tnot(isatransition(Mach,So,Sy)).
% Add all transitions from sink to sink
m(completed(Mach),sink,Sy,sink) :-
        alphabet(Mach,Sy).
% Otherwise the same
m(completed(Mach),So,Sy,Ta) :-
        m(Mach,So,Sy,Ta).
	
% There is a transition if there's a state it transits to.
isatransition(Mach,So,Sy) :-
        m(Mach,So,Sy,_).

m(dm1,a,0,a).
m(dm1,a,1,b).
m(dm1,b,2,b).
m(dm1,b,3,c).
m(dm1,c,4,c).

mis(dm1,a).
mfs(dm1,c).

%=================================================================
% complement machine: a machine that accepts the complement of the language

% Asume machine is completed and deterministic.
% The transitions of the complement machine are the same.
m(complement(Mach),So,Sy,Ta) :-
        m(Mach,So,Sy,Ta).

% The initial state of the complement machine is the same.
mis(complement(Mach),S) :- 
        mis(Mach,S).

% A state is a final state of the complement if it is NOT the final state
%    of the underlying machine.
mfs(complement(Mach),S) :- 
	is_state(Mach,S),
	tnot(mfs(Mach,S)).


/************************************************************/
%% non-minimal determinisic FSA

m(dfa,a,0,b).
m(dfa,a,1,f).
m(dfa,b,0,g).
m(dfa,b,1,c).
m(dfa,c,0,a).
m(dfa,c,1,c).
m(dfa,d,0,c).
m(dfa,d,1,g).
m(dfa,e,0,h).
m(dfa,e,1,f).
m(dfa,f,0,c).
m(dfa,f,1,g).
m(dfa,g,0,g).
m(dfa,g,1,e).
m(dfa,h,0,g).
m(dfa,h,1,c).

mis(dfa,a).
mfs(dfa,c).

m(aseem,q1,1,q1).
m(aseem,q1,0,q2).
m(aseem,q2,0,q2).
m(aseem,q2,1,q1).

mis(aseem,q1).
mfs(aseem,q1).
mfs(aseem,q2).


%=================================================================
%% Given a completed, deterministic machine, find an equivalent
%%  machine without redundant states by merging indistinguishable
%%  states

% min
m(min(Mach),So,Sy,Ta) :-
        reachable(min(Mach),So), % must bind So
	member(Ss,So),
	m(Mach,Ss,Sy,T),
	tsetof(S,indistinguishable(Mach,T,S),Ta).

mis(min(Mach),IS) :-
        mis(Mach,Bis),
	tsetof(S,indistinguishable(Mach,Bis,S),IS).
mfs(min(Mach),FS) :-
        mfs(Mach,Bfs),
	tsetof(S,indistinguishable(Mach,Bfs,S),FS).

indistinguishable(Mach,S1,S2) :-
	is_state(Mach,S1),
	is_state(Mach,S2),
	tnot(distinguishable(Mach,S1,S2)).

% Assume Mach is a completed deterministic machine
% S1 and S2 are distinquishable if S1 is final and S2 is not.
distinguishable(Mach,S1,S2) :-
	mfs(Mach,S1),
	is_state(Mach,S2),
        tnot(mfs(Mach,S2)).
% S1 and S2 are distinquishable if S2 is final and S1 is not.
distinguishable(Mach,S1,S2) :-
	mfs(Mach,S2),
	is_state(Mach,S1),
        tnot(mfs(Mach,S1)).
% S1 and S2 are distinguishable if some symbol Sy takes them to states that
%    are distinguishable.
distinguishable(Mach,S1,S2) :-
        m(Mach,S1,Sy,T1),
        m(Mach,S2,Sy,T2),
        distinguishable(Mach,T1,T2).

/************************************************************
	Regular Expressions
************************************************************/

/* a regular expression is represented as a Prolog term as follows:
RE --> atom | (RE+RE) | (RE*RE) | @(RE)
where + is alternation, * is concatenation, and @ is Kleene star 
*/

%re(Name,Expression).

%=================================================================
%% reacc determines if the language of RE EXP includes string with
%%   name StringName
reacc(Exp,StringName) :-
	reacc(Exp,StringName,0,F),
	stringlen(StringName,F).	

%reacc(Exp,StringName,From,To).
reacc(A,S,From,To) :- atomic(A),string(S,From,A,To).
reacc((E1*E2),S,From,To) :-
	reacc(E1,S,From,M),
	reacc(E2,S,M,To).
reacc((E1+_E2),S,From,To) :- reacc(E1,S,From,To).
reacc((_E1+E2),S,From,To) :- reacc(E2,S,From,To).
reacc(@(_E),_S,From,From).
reacc(@(E),S,From,To) :-
	reacc(@(E),S,From,Mid),
	reacc(E,S,Mid,To).


/* For each regular expression, RE, define a finite state machine,
re(RE), that accepts the language of RE.

States in a machine re(RE) are of the form i(RE1) and f(RE1) for every
regular subexpression of RE, with the intuition being the machine
starts in state i(RE), recognizes a string S and terminates in state
f(RE) if and only if S is in the language of the regular expression RE.
*/

%% base, seeing an atomic symbol
m(re(RE),i(RE),RE,f(RE)) :- atomic(RE).

m(re(RE1*RE2),i(RE1*RE2),'',i(RE1)).
m(re(RE1*RE2),f(RE1),'',i(RE2)).
m(re(RE1*RE2),f(RE2),'',f(RE1*RE2)).
m(re(RE1*_RE2),S,Sy,T) :- m(re(RE1),S,Sy,T).
m(re(_RE1*RE2),S,Sy,T) :- m(re(RE2),S,Sy,T).

m(re(RE1+RE2),i(RE1+RE2),'',i(RE1)).
m(re(RE1+RE2),i(RE1+RE2),'',i(RE2)).
m(re(RE1+RE2),f(RE1),'',f(RE1+RE2)).
m(re(RE1+RE2),f(RE2),'',f(RE1+RE2)).
m(re(RE1+_RE2),S,Sy,T) :- m(re(RE1),S,Sy,T).
m(re(_RE1+RE2),S,Sy,T) :- m(re(RE2),S,Sy,T).

m(re(@(RE)),i(@(RE)),'',f(@(RE))).
m(re(@(RE)),i(@(RE)),'',i(RE)).
m(re(@(RE)),f(RE),'',f(@(RE))).
m(re(@(RE)),f(@(RE)),'',i(@(RE))).
m(re(@(RE)),S,Sy,T) :- m(re(RE),S,Sy,T).

mis(re(RE),i(RE)).
mfs(re(RE),f(RE)).

string(s3,0,a,1).
string(s3,1,b,2).
string(s3,2,b,3).
string(s3,3,c,4).
string(s3,4,b,5).
string(s3,5,b,6).

stringlen(s3,6).

% :- accept(re(a* @(b+c)),s3).

%=================================================================

/* Given a machine M, construct a regular expression that represents
the same language. (UNFINISHED, assumes states are integers, uses list
to represent alternation)*/

%% mis(mre,S),mfs(mre,T),MaxS=3,re(S,T,MaxS,Mach,RE).

%% directly from S to T going thru no intermediate states
re(S,T,0,Mach,RE) :- is_state(Mach,S),is_state(Mach,T),S\==T,
	(setof(Sy,m(Mach,S,Sy,T),RE)->true;RE=[]).
%% directly from S to S
re(S,S,0,Mach,[estring|RE]) :- is_state(Mach,S),
	(setof(Sy,m(Mach,S,Sy,S),RE)->true;RE=[]).
%% from I to J going thru states equal to or less than K.
re(I,J,K,Mach,[RE1* @(RE2) * RE3,RE4]) :- K>0,
	K1 is K-1,
	re(I,K,K1,Mach,RE1),
	re(K,K,K1,Mach,RE2),
	re(K,J,K1,Mach,RE3),
	re(I,J,K1,Mach,RE4).


%% exmple machine
m(mre,1,1,3).
m(mre,1,0,2).
m(mre,2,0,1).
m(mre,2,1,3).
m(mre,3,0,2).
m(mre,3,1,2).

mis(mre,1).
mfs(mre,2).



/* Beginning to simplify RE's? */
simp(A,B) :-
	simp1(A,C), 
	(A \== C
	 ->	simp(C,B)
	 ;	B = A
	).

simp1([A],A) :- !.
simp1([[]|B],B1) :- !,simp2(B,B1),!.
simp1([A|B],[A1|B1]) :- simp1(A,A1),simp2(B,B1),!.
simp1(estring*A,A) :- !.
simp1(A*estring,A) :- !.
simp1([]*_,[]) :- !.
simp1(_*[],[]) :- !.
simp1(A*B,A1*B1) :- simp1(A,A1),simp1(B,B1),!.
simp1(@(estring),estring) :- !.
simp1(@(A),@(A1)) :- simp1(A,A1),!.

simp1(A,A).

simp2([A],[A1]) :- simp1(A,A1),!.
simp2([[]|B],B1) :- !,simp2(B,B1).
simp2([A|B],[A|B1]) :- simp2(B,B1),!.

%%simp1([A|B],R) :- sort([A|B],S),elim_dups(S,R),R\==S, !.
%%simp1(A,B) :- simp1(A,B).



elim_dups([],[]).
elim_dups([X],[X]) :- !.
elim_dups([X,X|Y],Z) :- !,elim_dups([X|Y],Z).
elim_dups([X,Y|Z],[X|W]) :- elim_dups([Y|Z],W).

%% Print out the transition relation and the initial and final states
%%  of a machine.

print_machine(Mach) :-
	write('Machine: '),writeln(Mach),
	writeln('  Transitions:'),
	findall(m(S0,Sym,S),m(Mach,S0,Sym,S),Transitions),
	sort(Transitions,STransitions),
	(member(m(S0,Sym,S),STransitions),
	 write('    '),
	 write(S0),write('--'),
	 write(Sym),
	 write('-->'),
	 writeln(S),
	 fail
	 ;
	 true
	),
	findall(IS,mis(Mach,IS),ISs),
	write('   Initial States: '),writeln(ISs),
	findall(FS,mfs(Mach,FS),FSs),
	write('   Final States: '),writeln(FSs).

print_string(String) :-
	write('String: '),writeln(String),
	write('    '),
	findall(s(L,S),string(String,L,S,_),List),
	sort(List,SList),
	(member(s(L,S),SList),
	 write(S),write(' '),
	 fail
	 ;
	 true
	),
	stringlen(String,Len),
	writeln(['Len'=Len]).

draw_machine(Mach) :-
	open(file('fsm.txt'), write, Stream),
	set_output(Stream),
	print_machine(Mach),
	close(Stream),
	set_output(userout),
	shell(['FSMGenerator.exe ', 'fsm.txt']).

end_of_file.
Queries of interest:

print_machine(m0s1s2s).
print_machine(efree(m0s1s2s)).
print_machine(det(efree(m0s1s2s))).
print_machine(det(det(efree(m0s1s2s)))).
print_machine(dfa).
print_machine(min(dfa)).
print_machine(min(det(efree(m0s1s2s)))). %???
print_machine(completed(det(efree(m0s1s2s)))).
print_machine(min(completed(det(efree(m0s1s2s))))).
print_machine(complement(completed(det(efree(m0s1s2s))))).

print_machine(re(a* @(b+c))).
print_machine(efree(re(a* @(b+c)))).
print_machine(min(completed(det(efree(re(a* @(b+c))))))).
