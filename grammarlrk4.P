/* explore building ``LR(k)'' tables using intern, and using them.

This doesn't quite do it the way I'd like.  It doesn't use the
indexing capabilities of the tries.

parse with tabling to get a lr(k)-like algorithm.  This passes a
set of follow-ing strings as the follow set. */

:- import length/2,append/3,member/2 from basics.
:- import get_calls/3, get_returns/2, trie_assert/1 from tables.
:- import newtrie/1, delete_trie/1, trie_intern/5, trie_interned/4
	from intern.

at :- abolish_all_tables.
pt(G) :- get_calls(G,C,R),writeln(G),get_returns(C,R),tab(2),writeln(G),fail.


:- table parse/4.
parse(Sym,Follows,Str0,Str) :-
	rule(Sym,RB),
	parseSF(RB,Follows,Str0,Str),
	writeln(p((Sym-->RB),Str0,Str)).

parseSF([],Follows,Str0,Str) :- !,Str0=Str,
	next_str(Follows,Str).
parseSF([Sym|SF],Follows,Str0,Str) :- 
	nonterminal(Sym),
	firstKs(SF,Follows,FollowsSym),
	parse(Sym,FollowsSym,Str0,Str1),
	parseSF(SF,Follows,Str1,Str).
parseSF([Term|SF],Follows,Str0,Str) :- 
	word(Str0,Term,Str1),
	parseSF(SF,Follows,Str1,Str).

next_str(TrieId,Str) :- trie_interned(List,TrieId,_,_),next_strL(List,Str).

next_strL([],_).
next_strL(['$'|_],S) :- \+ word(S,_,_).  % end of string
next_strL([Sym|Syms],S) :- word(S,Sym,S1),next_strL(Syms,S1).

:- table firstKs/3.
% Interns the set produced and return the trie_ptr
firstKs(SF,FollowsTrie,FirstsTrie) :-
    findall(First,
            (trie_interned(Follow,FollowsTrie,_,_),
             same_length(Follow,First),
             firstK(SF,Follow,First)),
            Firsts),
    list_to_trieId(Firsts,FirstsTrie).

:- dynamic list_trieId/2.
list_to_trieId(List,TrieId) :-
    sort(List,SList),
    (list_trieId(SList,TrieId)
     -> true
     ;  intern_list(SList,TrieId),
        trie_assert(list_trieId(List,TrieId))).

intern_list(List,TrieId) :-
    newtrie(TrieId),
    (member(El,List),
     trie_intern(El,TrieId,_,_,_),
     fail
    ; true).

clean_tries :-
	retract(list_trieId(_,TrieId)),
	delete_trie(TrieId),
	fail.
clean_tries.

:- table firstK/3.
% firstK(SF,Follow,First)
firstK(_,_,[]).
firstK([],[S|Follows],[S|Firsts]) :- append(Firsts,_,Follows).
firstK([NT|SF],Follow,First) :-
	nonterminal(NT),
	same_length(Follow,NTFollow),
	firstK(SF,Follow,NTFollow),
	rule(NT,Body),
	firstK(Body,NTFollow,First).
firstK([T|SF],Follows,[T|Firsts]) :-
	\+ nonterminal(T),
	firstK(SF,Follows,Firsts).

same_length([],[]).
same_length([_|I],[_|O]) :- same_length(I,O).

nonterminal(S) :- rule(S,_),!.

%%| ?- list_to_trieId([['$','$']],IFol),parse(s,IFol,0,14).

/* S -> A B.
   A -> aA | a.
   B -> Bb | b.
*/
rule(s,[an,bn]).
rule(an,[a,an]).
rule(an,[a]).
rule(bn,[bn,b]).
rule(bn,[b]).

word(0,a,1).
word(1,a,2).
word(2,a,3).
word(3,a,4).
word(4,a,5).
word(5,a,6).
word(6,a,7).
word(7,a,8).
word(8,a,9).
word(9,a,10).
word(10,a,11).
word(11,a,12).
word(12,b,13).
word(13,b,14).
%word(14,'$',15).
%word(15,'$',16).
